#pragma kernel makeLobeSpecularMapMain

#define PI 3.14159265359f

TextureCube<float4> environmentMap;
RWTexture2D<float4> Result;
int mapSize;
float roughness;
SamplerState sampler_LinearClamp;

float3 getNormalFromOctahedral(float2 uv) {

    uv /= mapSize;
    uv = uv * 2.0f - 1.0f;
    float3 normal = float3(uv, 1 - abs(uv.x) - abs(uv.y));

    if (normal.z < 0.0f) {
        float x = normal.x;
        float y = normal.y;
        normal.x = (1.0f - abs(y)) * sign(normal.x);
        normal.y = (1.0f - abs(x)) * sign(normal.y);
    }

    return normalize(normal);

}

float RadicalInverse_VdC(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
// ----------------------------------------------------------------------------
float2 Hammersley(uint i, uint N)
{
    return float2(float(i) / float(N), RadicalInverse_VdC(i));
}

float3 ImportanceSampleGGX(float2 Xi, float3 N, float roughness)
{
    float a = roughness * roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    // from spherical coordinates to cartesian coordinates
    float3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    // from tangent-space vector to world-space sample vector
    float3 up = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
    float3 tangent = normalize(cross(up, N));
    float3 bitangent = cross(N, tangent);

    float3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

float3 getLobeSpecular(float3 normal) {

    float3 N = normal;
    float3 R = N;
    float3 V = R;

    const uint SAMPLE_COUNT = 1024;
    float totalWeight = 0.0f;
    float3 color = 0.0f;

    for (int i = 0; i < SAMPLE_COUNT; i++) {

        float2 Xi = Hammersley(i, SAMPLE_COUNT);
        float3 H = ImportanceSampleGGX(Xi, N, roughness);
        float3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);
        if (NdotL > 0.0)
        {
            color += environmentMap.SampleLevel(sampler_LinearClamp, L, 0).rgb * NdotL;
            totalWeight += NdotL;
        }

    }

    return float4(color / totalWeight, 1.0f);

}

[numthreads(8,8,1)]
void makeLobeSpecularMapMain(uint3 id : SV_DispatchThreadID)
{
    
    float2 uv = id.xy;
    float3 normal = getNormalFromOctahedral(uv);

    float3 lobeSpecularColor = getLobeSpecular(normal);

    Result[uv] = float4(lobeSpecularColor, 1.0f);
}
